buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
    baseName = 'gs-spring-boot'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations.all {
    // Logback slf4j conflict
    exclude group: "commons-logging", module: "commons-logging"
}

dependencies {
    // Bridge logging from JCL to SLF4j
    compile ( "org.slf4j:jcl-over-slf4j:1.7.12" )
    compile ( "ch.qos.logback:logback-classic:1.1.3" )

    // Groovy
    compile("org.codehaus.groovy:groovy-all:2.4.4")

    // Spring boot
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    // AspectJ
    compile( "org.aspectj:aspectjrt" )
    compile( "org.aspectj:aspectjtools" )
    compile( "org.aspectj:aspectjweaver" )

    // Spring data rest
    //compile("org.springframework.data:spring-data-rest-webmvc:2.4.1.RELEASE")

    // JTS
    compile("com.vividsolutions:jts:1.13")

    // Tests
    testCompile("org.springframework.boot:spring-boot-starter-test")

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

test {
    if ( project.hasProperty('jvmArgs') ) {
        def argsList = (project.jvmArgs.split("\\s+") as List<String>)
        boolean profileSet = false
        argsList.each { arg ->
            println arg.indexOf("-Dspring.profiles.active=")
            if (arg.indexOf("-Dspring.profiles.active=")>=0) { profileSet = true }
        }
        if (!profileSet) { argsList.add("-Dspring.profiles.active=dev") }
        jvmArgs = argsList
    } else {
        jvmArgs = ["-Dspring.profiles.active=dev"]
    }
}

bootRun {
    if ( project.hasProperty('jvmArgs') ) {
        def argsList = (project.jvmArgs.split("\\s+") as List<String>)
        boolean profileSet = false
        argsList.each { arg ->
            println arg.indexOf("-Dspring.profiles.active=")
            if (arg.indexOf("-Dspring.profiles.active=")>=0) { profileSet = true }
        }
        if (!profileSet) { argsList.add("-Dspring.profiles.active=dev") }
        jvmArgs = argsList
    } else {
        jvmArgs = [ "-Dspring.profiles.active=dev" ]
    }
}